class Collection{constructor(t){this._url=t,this._list=[]}fetch(){return fetch(this._url).then(t=>t.json()).then(t=>this.setList(t))}setList(t){this._list=t}getList(){return this._list}get(e){return this._list.find(t=>t.id==e)}delete(e){return fetch(this._url+"/"+e,{method:"DELETE",headers:{"Content-Type":"application/json"}}),this._list=this._list.filter(t=>t.id!==e),Promise.resolve()}update(t){var e={marks:this.getMarks(t)};return fetch(this._url+"/"+t.dataset.id,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),Promise.resolve()}add(t){return fetch(this._url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t,marks:[0,0,0,0,0,0,0,0,0,0]})}).then(t=>t.json()).then(t=>(this._list.push(t),t))}getMarks(t){const e=[];return(t=Object.values(t.querySelectorAll("input"))).map(t=>e.push(t.value)),e}}const API_URL="https://5dd3d5ba8b5e080014dc4bfa.mockapi.io/students/",STUDENT_SELECTOR=".student";class Controller{constructor(t){this.$conteiner=t,this.studentsCollection=new Collection(API_URL),this.studentsCollection.fetch().then(()=>this.renderList()),this.studentsListView=new StudentsView({delete:t=>this.deleteStudent(t),tune:t=>this.tuneStudent(t)}),this.newFormStudent=new NewStudentFormView({submit:t=>this.onSubmit(t)}),this.studentsListView.appendTo(this.$conteiner)}deleteStudent(t){this.studentsCollection.delete(t).then(()=>this.studentsListView.removeElement(t))}tuneStudent(t){this.studentsCollection.update(t).then(()=>this.studentsListView.renderStudent(t))}onSubmit(t){this.studentsCollection.add(t).then(t=>this.studentsListView.appendStudent(t))}renderList(){this.studentsListView.renderStudents(this.studentsCollection.getList()),this.newStudentForm=this.newFormStudent.addTrigger(),this.$conteiner.after(this.newStudentForm[0])}}$(()=>new Controller($("#root")));class NewStudentFormView{static FORM_BTN_SELECTOR="#addStudentBtn";static FORM_SELECTOR="#student-form";static FORM_INPUT_SELECTOR="#studentNameInput";static TRIGGER_SELECTOR="#add-form";constructor(t){this._options=t}addTrigger(){return $('<span id="add-form">+</span>').on("click",this.onTriggerClick.bind(this))}onTriggerClick(t){t.preventDefault();const e=t.target;this.replaceForm(e),e.style.display="none"}replaceForm(t){var e=this.makeNewStudentForm()[0];t.parentElement.append(e)}makeNewStudentForm(){return $(`<form id=student-form>
            <input type="text" id="studentNameInput"/>
            <button id="addStudentBtn" class="u-full-width">Add</button>
            </form> `).on("submit",this.onSubmitBtnClick.bind(this))}onSubmitBtnClick(t){t.preventDefault();var e=$(NewStudentFormView.FORM_INPUT_SELECTOR).val();this.isEmpty(e)?console.log("Enter task"):(this._options.submit(e),$(NewStudentFormView.FORM_SELECTOR)[0].reset(),this.removeForm(t))}removeForm(t){t.target.remove(),$(NewStudentFormView.TRIGGER_SELECTOR)[0].style.display=""}isEmpty(t){return!t}}const BTN_DELETE_SELECTOR=".delete",INPUT_SELECTOR=".input",STUDENTS_LIST_SELECTOR=".students_list";class StudentsView{constructor(t){this._options=t,this._$el=this.initList(),this.list=[]}initList(){return $('<table class="students_list"></table>').on("focusout",INPUT_SELECTOR,this.onFoucsOutInput.bind(this)).on("click",BTN_DELETE_SELECTOR,this.onDeleteBtnClick.bind(this))}appendTo(t,e=this._$el){return t.append(e)}onFoucsOutInput(t){t.stopPropagation(),t.target.defaultValue=t.target.value;t=this.findStudent(t.target);this._options.tune(t)}changeValue(t){return`<td><input type="number" class="input" id=inp${Math.random()} value="${t}"></td>`}onDeleteBtnClick(t){t.stopPropagation();t=this.findStudentId(t.target);this._options.delete(t)}removeElement(t){this._$el.find(`[data-id="${t}"]`).remove()}findStudent(t){return t.closest(STUDENT_SELECTOR)}findStudentId(t){return this.findStudent(t).dataset.id}setList(t){this.list=t,console.log(this.list)}renderStudents(t){t=t.map(t=>this.generateItem(t));this._$el.html(t)}renderStudent(t){this._$el.find(`[data-id="${t.id}"]`).replaceWith(t)}appendStudent(t){t=this.generateItem(t);this.appendTo($(STUDENTS_LIST_SELECTOR),t)}appendTo(t,e=this._$el){return t.append(e)}generateItem(t){if(t.marks)return`<tr class="student" data-id = ${t.id}>
                    <td class="name">${t.name}</td>
                    ${this.isArray(t.marks),t.marks.map(t=>`<td><input type="number" class="input" id=inp${Math.random()} value="${t}"></td>`)}
                    <td class="delete">X</td>
                </tr>`}isArray(t){if(!Array.isArray(t))return[0,0,0,0,0,0,0,0,0,0]}}